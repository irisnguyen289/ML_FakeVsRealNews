import jsonimport pandas as pdfrom getTFIDF import *def getData(fileNames):     fake = []    real = []        for name in fileNames:        f = open(name + '.json', encoding='utf-8')        file = json.load(f)        f.close()        for ID in file.keys():            if file[ID][1] == 'FAKE':                fake.append(file[ID][0])            else:                real.append(file[ID][0])    return fake, realdef getTestData(fileNames):    for name in fileNames:        f = open(name + '.json', encoding='utf-8')        file = json.load(f)        f.close()    return file        def categorize(string):    score = 0        for word in string:        if word in TFIDF:            score += TFIDF[word]                if score < 0:        return 'FAKE'    return 'REAL'# file {'ID' : ['string of news', 'FAKE or REAL'], ...}# each file has 1267 recordstrain_fileNames = ['file1','file2','file3','file0']test_fileNames = ['file4']fake, real = getData(train_fileNames)print('training set \n fake: ' + str(len(fake)) + ', real: ' + str(len(real)))test = getTestData(test_fileNames)# TFIDF {'word': score} where score is a numberTFIDF = finalScore(fake, real)correct = []result = []for ID in test.keys():    correct.append(test[ID][1])    result.append(categorize(test[ID][0]))df = pd.DataFrame(list(test.keys()), columns=['ID'])df['classification'] = resultdf['correct'] = correctdf = df.sort_values('ID', ascending=True)df.to_csv('answers.csv', index = False) # get correct classificationcorrect_df = df.loc[(df['classification'] == 'FAKE') & (df['correct'] == 'FAKE')]correct_df = correct_df.append(df.loc[(df['classification'] == 'REAL') \                                      & (df['correct'] == 'REAL')])correct_df = correct_df.sort_values('ID', ascending=True)correct_df.to_csv('correctAns.csv', index = False)print('percentage correct:', len(correct_df) / 1267 / len(test_fileNames))    